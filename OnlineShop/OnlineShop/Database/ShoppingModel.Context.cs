//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnlineShop.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbMyOnlineShoppingEntities : DbContext
    {
        public dbMyOnlineShoppingEntities()
            : base("name=dbMyOnlineShoppingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Tbl_Cart> Tbl_Cart { get; set; }
        public virtual DbSet<Tbl_CartStatus> Tbl_CartStatus { get; set; }
        public virtual DbSet<Tbl_Category> Tbl_Category { get; set; }
        public virtual DbSet<Tbl_MemberRole> Tbl_MemberRole { get; set; }
        public virtual DbSet<Tbl_Members> Tbl_Members { get; set; }
        public virtual DbSet<Tbl_Product> Tbl_Product { get; set; }
        public virtual DbSet<Tbl_Roles> Tbl_Roles { get; set; }
        public virtual DbSet<Tbl_ShippingDetails> Tbl_ShippingDetails { get; set; }
        public virtual DbSet<Tbl_SlideImage> Tbl_SlideImage { get; set; }
    
        public virtual int insert_category(string name, Nullable<bool> isActive, Nullable<bool> isDelete)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("isDelete", isDelete) :
                new ObjectParameter("isDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_category", nameParameter, isActiveParameter, isDeleteParameter);
        }
    
        public virtual ObjectResult<Tbl_Category> func_insert_category(string name, Nullable<bool> isActive, Nullable<bool> isDelete)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("isDelete", isDelete) :
                new ObjectParameter("isDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tbl_Category>("func_insert_category", nameParameter, isActiveParameter, isDeleteParameter);
        }
    
        public virtual ObjectResult<Tbl_Category> func_insert_category(string name, Nullable<bool> isActive, Nullable<bool> isDelete, MergeOption mergeOption)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("isDelete", isDelete) :
                new ObjectParameter("isDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tbl_Category>("func_insert_category", mergeOption, nameParameter, isActiveParameter, isDeleteParameter);
        }
    
        public virtual int insert_product(string name, Nullable<int> cate, Nullable<decimal> price)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var cateParameter = cate.HasValue ?
                new ObjectParameter("cate", cate) :
                new ObjectParameter("cate", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_product", nameParameter, cateParameter, priceParameter);
        }
    
        public virtual ObjectResult<Tbl_Product> func_insert_procduct(string name, Nullable<int> cate, Nullable<decimal> price)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var cateParameter = cate.HasValue ?
                new ObjectParameter("cate", cate) :
                new ObjectParameter("cate", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tbl_Product>("func_insert_procduct", nameParameter, cateParameter, priceParameter);
        }
    
        public virtual ObjectResult<Tbl_Product> func_insert_procduct(string name, Nullable<int> cate, Nullable<decimal> price, MergeOption mergeOption)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var cateParameter = cate.HasValue ?
                new ObjectParameter("cate", cate) :
                new ObjectParameter("cate", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tbl_Product>("func_insert_procduct", mergeOption, nameParameter, cateParameter, priceParameter);
        }
    }
}
